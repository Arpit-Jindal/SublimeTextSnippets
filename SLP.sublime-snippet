<snippet>
	<content><![CDATA[
Long Arr[lim], tree[4*lim], mul_lz[4*lim], add_lz[4*lim], set_lz[4*lim];

void push_down(int node, int a, int b) {
    //cout << a << '-' << b << ":  " << set_lz[node] << "," << mul_lz[node] << ',' << add_lz[node] << "  " << tree[node];
    if(set_lz[node] != -1) {
        tree[node] = (Long(b-a+1)*set_lz[node])%MOD;
        if(a!=b) {
            set_lz[2*node] = set_lz[node];
            set_lz[2*node+1] = set_lz[node];
            mul_lz[2*node] = 1;
            mul_lz[2*node+1] = 1;
            add_lz[2*node] = 0;
            add_lz[2*node+1] = 0;
        }
        set_lz[node] = -1;
    }

    if(mul_lz[node] != 1) {
        tree[node] = (tree[node] * mul_lz[node])%MOD;
        if(a!=b) {
            mul_lz[2*node] = (mul_lz[2*node]*mul_lz[node])%MOD;
            mul_lz[2*node+1] = (mul_lz[2*node+1]*mul_lz[node])%MOD;
            add_lz[2*node] = (add_lz[2*node]*mul_lz[node])%MOD;
            add_lz[2*node+1] = (add_lz[2*node+1]*mul_lz[node])%MOD;
        }
        mul_lz[node] = 1;
    }

    if(add_lz[node] != 0) {
        tree[node] = (tree[node] + (Long(b-a+1)*add_lz[node])%MOD)%MOD;
        if(a!=b) {
            add_lz[2*node] = (add_lz[2*node] + add_lz[node])%MOD;
            add_lz[2*node+1] = (add_lz[2*node+1] + add_lz[node])%MOD;
        }
        add_lz[node] = 0;
    }
    //cout << " -> " << tree[node] << endl;
    return ;
}

void build_tree(int node, int a, int b) {
    if(a>b) return ;
    set_lz[node] = -1;
    mul_lz[node] = 1;
    add_lz[node] = 0;
    if(a==b) {
        tree[node] = Arr[a]%MOD;
        return ;
    }

    int mid = (a+b)/2;

    build_tree(2*node, a,mid);
    build_tree(2*node+1,mid+1,b);

    tree[node] = (tree[2*node] + tree[2*node+1])%MOD;

    return ;
}

void update_tree(int node, int a, int b, int i, int j, int v, int arg) {
    push_down(node,a,b);
    if(a>b or a>j or b<i) return ;
    if(a>=i and b<=j) {
        if(arg==1) {
            add_lz[node] = v;
        }
        if(arg==2) {
            mul_lz[node] = v;
        }
        if(arg==3) {
            set_lz[node] = v;
        }
        push_down(node,a,b);
        return ;
    }

    int mid = (a+b)/2;

    update_tree(2*node,a,mid,i,j,v,arg);
    update_tree(2*node+1,mid+1,b,i,j,v,arg);

    tree[node] = (tree[2*node] + tree[2*node+1])%MOD;

    return ;
}

Long query_tree(int node, int a, int b, int i, int j) {
    push_down(node,a,b);
    if(a>b or a>j or b<i) return 0;
    if(a>=i and b<=j) return tree[node];

    Long ret1, ret2;
    int mid = (a+b)/2;

    ret1 = query_tree(2*node,a,mid,i,j);
    ret2 = query_tree(2*node+1,mid+1,b,i,j);
    return (ret1 = (ret1+ret2)%MOD);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>SLP</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
	<scope>source.cpp</scope>
	<scope>source.c</scope>
</snippet>
