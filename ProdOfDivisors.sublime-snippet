<snippet>
	<content><![CDATA[
Long N;
const int maxn = 200010;
const Long mod = 1e9 + 7;
const Long mod2 = 2 * (mod - 1);
Long iindex[maxn], L[maxn], R[maxn];
int num, pri[maxn], vis[maxn], pup[maxn];
vector<int>have[maxn];

void init()
{
	num = 0;
	int i, j, n;
	for (i = 2; i < maxn; i++)
	{
		if (vis[i])
			continue;
		pri[++num] = i;
		for (j = i + i; j < maxn; j = j + i)
		{
			vis[j] = 1;
		}
	}
	for (i = 1; i < maxn; i++)
	{
		n = i;
		for (j = 1; j <= num && pri[j] <= n; j++)
		{
			while (n % pri[j] == 0)
			{
				have[i].push_back(j);
				n /= pri[j];
			}
		}
	}
}

Long getresult(Long A, Long n, Long k)
{
	Long b = 1;
	while (n > 0)
	{
		if (n & 1)
		{
			b = (b * A) % k;
		}
		n = n >> 1;
		A = (A * A) % k;
	}
	return b;
}

void solve(int cishu, int n)
{
	int temp;
	int si = have[cishu].size();
	for (int i = 0; i < si; i++)
	{
		temp = have[cishu][i];
		iindex[temp] = (iindex[temp] + n) % mod2;
	}
}

void SolveForN(int N) {
	int x, maxn;
	Long k, n, ans;
	memset(iindex, 0, sizeof(iindex));
	memset(pup, 0, sizeof(pup));
	maxn = -1;
	for (int i = 1; i <= N; i++)
	{
		scanf("%d", &x);
		maxn = max(maxn, x);
		pup[x] = pup[x] + 1;
	}
	for (int i = 1; i <= maxn; i++)
	{
		//scanf("%d", &x);
		solve(i, pup[i]);
	}
	N = maxn;
	L[0] = R[N + 1] = 1;
	for (int i = 1; i <= N; i++)
		L[i] = L[i - 1] * (iindex[i] + 1) % mod2;
	for (int i = N; i >= 1; i--)
		R[i] = R[i + 1] * (iindex[i] + 1) % mod2;
	ans = 1;
	for (int i = 1; i <= N; i++)
	{
		k = L[i - 1] * R[i + 1] % mod2;
		n = iindex[i] * (iindex[i] + 1) / 2 % mod2;
		ans = ans * getresult(pri[i], n * k % mod2, mod) % mod;
	}
	printf("%lld\n", ans);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>ProdOfDivisors</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
	<scope>source.cpp</scope>
	<scope>source.c</scope>
</snippet>
