<snippet>
	<content><![CDATA[
#define L(x) (x<<1)
#define R(x) (x<<1 | 1)
#define MID(l,r) ((l+r)>>1)

int z[10], y[lim], cnty, cntz;

struct point {
	int x, y, z;
	point() {}
	point(int xx, int yy, int zz): x(xx), y(yy), z(zz) {}
};
struct Tnode {
	int l, r, cover, slen;
	int len() { return r - l;}
	int mid() { return MID(l, r);}
	bool in(int ll, int rr) { return l >= ll && r <= rr; }
	void lr(int ll, int rr) { l = ll; r = rr;}
};
struct box {
	point a, b;
};
struct Sline {int x, y1, y2, flag;};

Tnode node[lim << 1];
box bo[lim];
Sline Li[lim];

void add_line(int x1, int y1, int x2, int y2, int &cnt)
{
	Li[cnt].x = x1; Li[cnt].y1 = y1; Li[cnt].y2 = y2;
	Li[cnt++].flag = 1;
	Li[cnt].x = x2; Li[cnt].y1 = y1; Li[cnt].y2 = y2;
	Li[cnt++].flag = -1;
}

bool comp(Sline a, Sline b)
{
	if ( a.x == b.x )
		return a.flag > b.flag;
	return a.x < b.x;
}

void build_tree(int t, int l, int r)
{
	node[t].lr(l, r);
	node[t].cover = node[t].slen = 0;
	if ( node[t].l == node[t].r - 1 )
		return ;
	int mid = MID(l, r);
	build_tree(L(t), l, mid);
	build_tree(R(t), mid, r);
}
void push_down(int t)
{
	if ( node[t].cover >= 1)
		node[t].slen = y[node[t].r] - y[node[t].l];
	else
	{
		if ( node[t].len() == 1 )
			node[t].slen = 0;
		else
			node[t].slen = node[L(t)].slen + node[R(t)].slen;
	}
}
void update_tree(int t, Sline p)
{
	if ( y[node[t].l] >= p.y1 && y[node[t].r] <= p.y2 )
	{
		node[t].cover += p.flag;
		push_down(t);
		return ;
	}
	if ( node[t].len() == 1 ) return ;
	int mid = node[t].mid();
	if ( p.y1 < y[mid] ) update_tree(L(t), p);
	if ( p.y2 > y[mid] ) update_tree(R(t), p);
	push_down(t);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>RectUnion</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
	<scope>source.cpp</scope>
	<scope>source.c</scope>
</snippet>
